# This is a workflow to check and create a pull request for db changes

name: Flyway Info Pipeline (Self-Hosted)
run-name: Get info on ${{ github.head_ref || github.ref_name }} migrations

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # FLYWAY_LICENSE_KEY: ${{ secrets.FLYWAY_LICENSE_KEY }} #Repository Secret - Create this within the Projects Settings > Secrets > Actions section
  # Enable this for additional debug logging
  ACTIONS_RUNNER_DEBUG: true
  INFO_FILENAME: "info"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "info"
  info:
    name: Migration Info
    # The type of runner that the job will run on
    runs-on: self-hosted
    environment: "prod" #Ensure this environment name is setup in the projects Settings>Environment area. Ensuring any reviewers are also configured
    outputs:
      pendingMigrations: ${{ steps.checkStates.outputs.pendingMigrations }}
    env:
      stage: "Info"
      # Environment Secrets - Ensure all of the below have been created as an Environment Secret (Projects Settings > Secrets > Actions section, specially related to the environment in question) #
      databaseName: ${{ secrets.databaseName}}
      JDBC: ${{ secrets.JDBC }}
      userName: ${{ secrets.userName }}
      password: ${{ secrets.password }}
      # End of Environment Secrets #
      publishArtifacts: true

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Get/Set deployment environment
        run: |
          $deployments = curl ${{ github.event.repository.deployments_url }} | ConvertFrom-Json
          echo "deployment_environment=$( $deployments[0] | select -expand environment )" >> $env:GITHUB_ENV
          echo "${{ env.deployment_environment }}"

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs the Flyway info command -licenseKey="${{ env.FLYWAY_LICENSE_KEY }}"
      - name: Run Flyway Info command
        id: checkStates
        run: |
          flyway -community -user="${{ env.userName }}" -password="${{ env.password }}" -configFiles="${{ github.WORKSPACE }}\flyway.conf" -locations="filesystem:${{ github.WORKSPACE }}\\migrations, filesystem:${{ github.WORKSPACE }}\\migrations-${{ env.deployment_environment }}" info -url="${{ env.JDBC }}" -outputType=json > ${{ env.INFO_FILENAME }}.json
          $infoObj = Get-Content -Raw -Path ${{ env.INFO_FILENAME }}.json | ConvertFrom-Json
          cat ${{ env.INFO_FILENAME }}.json
          echo "$( $infoObj )"
          $pending = @($infoObj.migrations | Where-Object -Property state -Match "^Pending")
          echo "$( $pending )"
          echo "$( $pending.count )"
          echo "pendingMigrations=$( $pending.count -ne 0)" > $env:GITHUB_OUTPUT

      - name: Echo pending migrations
        run: |
          echo "${{ steps.checkStates.outputs.pendingMigrations }}"

      # Publish them as an artifact
      - name: Publish validated migration scripts
        if: env.publishArtifacts == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: flyway-info
          path: |
            ${{ github.WORKSPACE }}\${{ env.INFO_FILENAME }}.txt
            ${{ github.WORKSPACE }}\${{ env.INFO_FILENAME }}.json
