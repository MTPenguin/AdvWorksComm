# Simple workflow for debugging github actions
name: DEBUG
run-name: DEBUG ${{ github.ref }}

on:
  # Triggers the workflow on push or pull request events but only for branches beginning with 'task' that have changes in the migrations folder.
  push:
    branches:
      - "debug**"

  # Allows you to run this workflow manually from the Actions tab AND from other actions (fwTaskPushCreateCheck)
  workflow_dispatch:

# permissions:
#   actions: read|write|none
#   checks: read|write|none
#   contents: read|write|none
#   deployments: read|write|none
#   issues: read|write|none
#   packages: read|write|none
#   pull-requests: read|write|none
#   repository-projects: read|write|none
#   security-events: read|write|none
#   statuses: read|write|none
# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pull-requests: write
  actions: write

# Allow one concurrent deployment
concurrency:
  group: "debug"
  cancel-in-progress: true

jobs:
  job1:
    environment: DEBUG_ENVIRONMENT
    env:
      ACTIONS_RUNNER_DEBUG: true
      GH_TOKEN: ${{ github.token }}
      GITHUB_CONTEXT: ${{ toJson(github) }}
      SECRETS_CONTEXT: ${{ toJson(secrets) }}
      STRATEGY_CONTEXT: ${{ toJson(strategy) }}
      MATRIX_CONTEXT: ${{ toJson(matrix) }}
      NEEDS_CONTEXT: ${{ toJson(needs) }}

    runs-on: self-hosted
    steps:
      - name: View env
        run: env

      - name: View variable BASELINE_VERSION
        run: |
          echo "vars.BASELINE_VERSION: ${{ vars[format('BASELINE_VERSION')] }}"

      - name: View variable variable
        run: |
          echo "vars[output]: ${{ vars[format('JDBC_{0}', runner.name)] }}"

      # - name: Echo ContextsHY
      #   run: |
      #     echo "$env:GITHUB_CONTEXT"
      #     echo "$env:SECRETS_CONTEXT"
      #     echo "$env:STRATEGY_CONTEXT"
      #     echo "$env:MATRIX_CONTEXT"
      #     echo "$env:NEEDS_CONTEXT"

      # - name: Get/Set deployment environment
      #   run: |
      #     $deployments = curl ${{ github.event.repository.deployments_url }} | ConvertFrom-Json
      #     echo "deployment_environment=$( $deployments[0] | select -expand environment )" >> $env:GITHUB_ENV
      # - name: View deployment environment
      #   run: |
      #     echo "$env:deployment_environment"

      # - name: Set the value
      #   id: step_one
      #   run: |
      #     echo "action_state=yellow" >> $env:GITHUB_ENV
      # - name: Use the value
      #   id: step_two
      #   run: |
      #     echo "${{ env.action_state }}" # This will output 'yellow'

      # # Test Context
      # - name: Echo Context
      #   id: echo_context
      #   run: |
      #     echo "${{ env.deployment_environment }}"

      # # Test setting env
      # - name: Set Env
      #   run: |
      #     echo "dir_exists=$(Test-Path ${{ env.deployment_environment }})" >> $env:GITHUB_ENV
      # - name: Set Env 2
      #   run: |
      #     echo "dir_2=2" >> $env:GITHUB_ENV

      # # Read env 2
      # - name: Read env.dir_2
      #   run: |
      #     echo ${{ env.dir_2 }}

      # # Read env
      # - name: Read Env
      #   run: |
      #     echo ${{ env }}

      # # Read env dir_exists
      # - name: Read env.dir_exists
      #   run: |
      #     echo ${{ env.dir_exists }}

      # - name: Checkout
      #   uses: actions/checkout@v3

      # - name: Comment Pull Request Start
      #   run: |
      #     gh pr comment --body "DEBUG START"

      # # Test output
      # - name: Echo Commands
      #   id: echo
      #   run: |
      #     echo "Test" > output.txt
      #     echo "TEST=test" >> $env:GITHUB_OUTPUT
      #     echo "TEST1=$(cat output.txt)" >> $env:GITHUB_OUTPUT

      # - name: Test Echo
      #   run: |
      #     echo "test=${{ steps.echo.outputs.TEST }}"
      #     echo "test1=${{ steps.echo.outputs.TEST1 }}"

      # # - name: Comment Pull Request End
      # #   run: |
      # #     echo "test=${{ steps.echo.outputs.TEST }}"
      # #     gh pr comment --body "DEBUG END"- name: Comment Pull Request End

      # - name: Trigger Run Log Comment On Pull Request
      #   run: |
      #     gh workflow run commentLog.yml -r ${{ github.ref }} -f run_id="${{ github.run_id }}"
